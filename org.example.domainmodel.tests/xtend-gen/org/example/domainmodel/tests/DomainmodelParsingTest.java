/**
 * generated by Xtext 2.12.0
 */
package org.example.domainmodel.tests;

import com.google.inject.Inject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.XtextRunner;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.example.domainmodel.domainmodel.Domainmodel;
import org.example.domainmodel.tests.DomainmodelInjectorProvider;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(XtextRunner.class)
@InjectWith(DomainmodelInjectorProvider.class)
@SuppressWarnings("all")
public class DomainmodelParsingTest {
  @Inject
  private ParseHelper<Domainmodel> parseHelper;
  
  @Test
  public void inputTest() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("datatype String");
      _builder.newLine();
      _builder.newLine();
      _builder.append("entity Aluno{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("nome : String");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("matricula: String\t\t\t\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("curso: Curso\t");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("entity Curso{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("nome: String");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("escola: Escola");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("entity Universidade{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("nome: String");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      final Domainmodel result = this.parseHelper.parse(_builder);
      Assert.assertNotNull(result);
      Assert.assertTrue(result.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
